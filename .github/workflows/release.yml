name: Release

permissions:
  contents: write
  packages: write
  issues: write
  id-token: write

on:
  push:
    tags:
      # - "v*"
      - "v[0-9]+.[0-9]+.[0-9]+"


jobs:
  release:
    name: Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
            asset_suffix: linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ""
            asset_suffix: linux-arm64
          - os: windows-latest # REMOVE UNTIL WE FIND A SOLUTION REGARDING OPEN SSL
            target: x86_64-pc-windows-msvc
            suffix: .exe
            asset_suffix: windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
            asset_suffix: macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
            asset_suffix: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Get binary name
        shell: bash
        run: |
          BINARY_NAME=$(grep -m1 'name\s*=' Cargo.toml | cut -d'"' -f2 | cut -d"'" -f2)
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      # Install OpenSSL on Ubuntu
      - name: Install OpenSSL (Ubuntu)
        shell: bash
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      # Install OpenSSL on macOS
      - name: Install OpenSSL (macOS)
        shell: bash
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      # Install OpenSSL on Windows
      - name: Install OpenSSL (Windows)
        shell: bash
        if: runner.os == 'Windows'
        run: |
          choco install strawberryperl make

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          cargo install cross

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
        env:
          OPENSSL_STATIC: "1"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Prepare asset
        shell: bash
        run: |
          # Convert Windows paths to bash-compatible format for Windows runners
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cd "$GITHUB_WORKSPACE/target/${{ matrix.target }}/release"
          else
            cd target/${{ matrix.target }}/release
          fi
          tar -czf "../../../${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" "${{ env.BINARY_NAME }}${{ matrix.suffix }}"
  
      - name: Generate checksums
        shell: bash
        run: |
          # Ensure we're in the correct directory
          cd "$GITHUB_WORKSPACE"
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            shasum -a 256 "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # certutil -hashfile "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" SHA256 | findstr /v "hash" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
            # certutil -hashfile "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" SHA256 | findstr /v /c:"SHA256 hash of" /c:"CertUtil" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
            powershell -Command "(Get-FileHash -Algorithm SHA256 '${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz').Hash.ToLower() + '  ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz'" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
            # certutil -hashfile "committy-windows-amd64.exe.tar.gz" SHA256 | findstr /v /c:"SHA256 hash of" /c:"CertUtil" > "committy-windows-amd64.exe.tar.gz.sha256"
          else
            sha256sum "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
          fi

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz
            ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}