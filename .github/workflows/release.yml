name: Release

permissions:
  contents: write
  packages: write
  issues: write
  id-token: write

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+-*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.release_type.outputs.is_prerelease }}
      draft: ${{ steps.release_type.outputs.draft }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set Release Type
        id: release_type
        run: |
          if [[ ${{ github.ref }} =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "draft=true" >> $GITHUB_OUTPUT
          else
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: ${{ steps.release_type.outputs.draft }}
          prerelease: ${{ steps.release_type.outputs.is_prerelease }}
          body: ${{ steps.changelog.outputs.changelog }}
          name: ${{ steps.release_type.outputs.is_prerelease == 'true' && format('Pre-release {0}', github.ref_name) || format('Release {0}', github.ref_name) }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: create-release
    name: Release for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ""
            asset_suffix: linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            suffix: ""
            asset_suffix: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
            asset_suffix: windows-amd64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ""
            asset_suffix: macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            suffix: ""
            asset_suffix: macos-arm64

    steps:
      - uses: actions/checkout@v4

      - name: Get binary name and version
        shell: bash
        run: |
          BINARY_NAME=$(grep -m1 'name\s*=' Cargo.toml | cut -d'"' -f2 | cut -d"'" -f2)
          VERSION=$(grep -m1 'version\s*=' Cargo.toml | cut -d'"' -f2 | cut -d"'" -f2)
          echo "BINARY_NAME=$BINARY_NAME" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +'%Y-%m-%d')" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install strawberryperl make

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          cargo install cross

      - name: Build
        shell: bash
        run: |
          # Add build metadata
          BUILD_METADATA="target=${{ matrix.target }},date=${{ env.BUILD_DATE }},version=${{ env.VERSION }}"
          
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            cross build --release --target ${{ matrix.target }}
          else
            cargo build --release --target ${{ matrix.target }}
          fi
          
          # Verify binary exists and is executable
          BINARY_PATH="target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.suffix }}"
          if [ ! -f "$BINARY_PATH" ]; then
            echo "Error: Binary not found at $BINARY_PATH"
            exit 1
          fi
          
          if [[ "$RUNNER_OS" != "Windows" ]]; then
            if [ ! -x "$BINARY_PATH" ]; then
              echo "Error: Binary is not executable"
              exit 1
            fi
          fi
        env:
          OPENSSL_STATIC: "1"
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUST_BACKTRACE: 1
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}

      - name: Prepare asset
        shell: bash
        run: |
          # Create dist directory
          mkdir -p dist
          
          # Copy binary and create archive
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.suffix }}" dist/
          else
            cp "target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.suffix }}" dist/
          fi
          
          # Add metadata file
          cat > dist/metadata.txt << EOF
          Version: ${{ env.VERSION }}
          Target: ${{ matrix.target }}
          Build Date: ${{ env.BUILD_DATE }}
          EOF
          
          # Create archive
          cd dist
          tar -czf "../${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" ./*
          cd ..

      - name: Generate checksums
        shell: bash
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            shasum -a 256 "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            powershell -Command "(Get-FileHash -Algorithm SHA256 '${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz').Hash.ToLower() + '  ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz'" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
          else
            sha256sum "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz" > "${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256"
          fi

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.create-release.outputs.is_prerelease == 'true' && format('Pre-release {0}', github.ref_name) || format('Release {0}', github.ref_name) }}
          prerelease: ${{ needs.create-release.outputs.is_prerelease }}
          body: ${{ needs.create-release.outputs.changelog }}
          draft: ${{ needs.create-release.outputs.draft }}
          files: |
            ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz
            ${{ env.BINARY_NAME }}-${{ matrix.asset_suffix }}.tar.gz.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}